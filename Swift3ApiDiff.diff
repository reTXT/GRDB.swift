 enum BusyMode {
-    case ImmediateError
+    case immediateError
-    case Timeout(NSTimeInterval)
+    case timeout(NSTimeInterval)
-    case Callback(BusyCallback)
+    case callback(BusyCallback)
 }
 struct DatabaseValue {
     enum Storage {
-        case Null
+        case null
-        case Int64(Swift.Int64)
+        case int64(Int64)
-        case Double(Swift.Double)
+        case double(Double)
-        case String(Swift.String)
+        case string(String)
-        case Blob(NSData)
+        case blob(NSData)
     }
 }
 protocol MutablePersistable {
-    mutating func didInsertWithRowID(rowID: Int64, forColumn column: String?)
+    mutating func didInsert(with rowID: Int64, for column: String?)
 }

 protocol Persistable {
-    func didInsertWithRowID(rowID: Int64, forColumn column: String?)
+    func didInsert(with rowID: Int64, for column: String?)
 }

 protocol RowConvertible {
-    init(_ row: Row)
+    init(row: Row)
 }

 class Record {
-    init(_ row: Row)
+    init(row: Row)
-    func didInsertWithRowID(rowID: Int64, forColumn column: String?)
+    func didInsert(with rowID: Int64, for column: String?)
 }
